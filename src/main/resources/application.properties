spring.mvc.pathmatch.matching-strategy= ant_path_matcher

# Database Configuration
spring.datasource.url=jdbc:sqlserver://localhost:1433;database=IterisLoja;user=sa;password=It3r15!@#$;loginTimeout=30;encrypt=true;trustServerCertificate=true;
spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver

# spring.datasource.url: Aqui fiz a URL do seu banco, em outras palavras a connection string.
# spring.datasource.driverClassName: Aqui fica qual é o driver usado para conectar no banco, no nosso caso o SQL Server

# Spring data and Hibernate Configuration
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.default_schema=dbo
spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# spring.jpa.show-sql: Isso vai fazer com que as queries que foram montadas aparecem no console, isso é bem importante na hora de tentar corrigir um problema;
# spring.jpa.properties.hibernate.defaultschema:_ Aqui vamos dizer para o hibernate qual é o schema padrão que vamos usar, deixei com "dbo"pois é o padrão criado pelo SQL Server;
# spring.jpa.hibernate.ddl-auto: Nessa configuração estamos dizendo para o hibernate não tentar criar as tabelas quando a aplicação subir, pois quem vai cuidar disso vai ser o Liquibase;
# spring.jpa.hibernate.naming.physical-strategy: Essa propriedade diz para o hibernate como vai ser o nome das colunas do nosso banco, no nosso caso estamos falando para ele usar os nomes que ficam nas annotations.

# Liquibase Configuration
spring.liquibase.change-log=classpath:changelog-default.xml
spring.liquibase.enabled=true

# spring.liquibase.change-log: Aqui estamos falando onde fica o arquivo com a definição de cada migration;
# spring.liquibase.enabled: Essa propriedade apenas ativa o Liquibase, com isso sempre q a aplicação subir o Spring vai rodar o liquibase para atualizar o banco(se necessário).